generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model role {
    id         Int      @id @default(autoincrement())
    name       String
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    users      user[]
}

model user {
    id             Int       @id @default(autoincrement())
    role_id        Int
    username       String    @unique
    email          String    @unique
    password       String    @db.Text
    first_name     String
    middle_name    String?
    last_name      String
    remember_token String?   @db.Text
    image          String?   @db.Text
    deleted_at     DateTime?
    created_at     DateTime  @default(now())
    updated_at     DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    role           role      @relation(fields: [role_id], references: [id])

    @@index([role_id], map: "user_role_id_fkey")
}

model department {
    id         Int      @id @default(autoincrement())
    name       String
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    courses    course[]
}

model course {
    id            Int        @id @default(autoincrement())
    department_id Int
    name          String     @unique
    created_at    DateTime   @default(now())
    updated_at    DateTime   @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    department    department @relation(fields: [department_id], references: [id])
    students      student[]

    @@index([department_id], map: "course_department_id_fkey")
}

model student {
    id             Int                  @id @default(autoincrement())
    course_id      Int
    student_number String               @unique
    rfid_number    String?              @unique
    first_name     String
    middle_name    String?
    last_name      String
    address_line_1 String               @db.Text
    address_line_2 String?              @db.Text
    city           String
    province       String
    year           Int
    section        String?
    is_active      Boolean              @default(true)
    created_at     DateTime             @default(now())
    updated_at     DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    deleted_at     DateTime?
    course         course               @relation(fields: [course_id], references: [id])
    terms          term_student[]
    validation     validation_history[]

    @@index([course_id], map: "student_course_id_fkey")
}

model term {
    id             Int                  @id @default(autoincrement())
    school_year_id Int
    term           Int
    created_at     DateTime             @default(now())
    updated_at     DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    school_year    school_year          @relation(fields: [school_year_id], references: [id], onDelete: Cascade)
    students       term_student[]
    validation     validation_history[]

    @@index([school_year_id], map: "term_school_year_id_fkey")
}

model school_year {
    id         Int      @id @default(autoincrement())
    year_start Int      @unique
    year_end   Int
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    terms      term[]
}

model term_student {
    id         Int      @id @default(autoincrement())
    student_id Int
    term_id    Int
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
    student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
    term       term     @relation(fields: [term_id], references: [id])

    @@index([student_id], map: "term_student_student_id_fkey")
    @@index([term_id], map: "term_student_term_id_fkey")
}

model validation_history {
    id         Int      @id @default(autoincrement())
    student_id Int
    term_id    Int
    created_at DateTime @default(now())
    student    student  @relation(fields: [student_id], references: [id])
    term       term     @relation(fields: [term_id], references: [id])

    @@index([student_id], map: "validation_history_student_id_fkey")
    @@index([term_id], map: "validation_history_term_id_fkey")
}

model forgot_password {
    id         Int      @id @default(autoincrement())
    email      String
    reset_code String
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}
