// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model role {
    id         Int      @id @default(autoincrement())
    users      user[]
    name       String   @db.VarChar(191)
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model user {
    id             Int      @id @default(autoincrement())
    role           role     @relation(fields: [role_id], references: [id])
    role_id        Int
    username       String   @unique
    email          String   @unique
    password       String
    first_name     String   @db.VarChar(191)
    middle_name    String?  @db.VarChar(191)
    last_name      String   @db.VarChar(191)
    remember_token String?  @db.VarChar(191)
    created_at     DateTime @default(now())
    updated_at     DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model department {
    id         Int      @id @default(autoincrement())
    courses    course[]
    name       String   @db.VarChar(191)
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model course {
    id            Int        @id @default(autoincrement())
    department    department @relation(fields: [department_id], references: [id])
    department_id Int
    students      student[]
    name          String     @db.VarChar(191)
    created_at    DateTime   @default(now())
    updated_at    DateTime   @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model student {
    id             Int                  @id @default(autoincrement())
    terms          term_student[]
    validation     validation_history[]
    course         course               @relation(fields: [course_id], references: [id])
    course_id      Int
    student_number Int                  @unique
    rfid_number    String?              @unique
    first_name     String               @db.VarChar(191)
    middle_name    String?              @db.VarChar(191)
    last_name      String               @db.VarChar(191)
    address_line_1 String
    address_line_2 String?
    city           String               @db.VarChar(191)
    province       String               @db.VarChar(191)
    year           Int
    section        String?
    is_active      Boolean              @default(true)
    created_at     DateTime             @default(now())
    updated_at     DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model term {
    id             Int                  @id @default(autoincrement())
    students       term_student[]
    validation     validation_history[]
    school_year    school_year          @relation(fields: [school_year_id], references: [id])
    school_year_id Int
    term           Int
    created_at     DateTime             @default(now())
    updated_at     DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model school_year {
    id         Int      @id @default(autoincrement())
    term       term[]
    year_start Int      @unique
    year_end   Int
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

// Pivot table for Term and Student table
model term_student {
    id         Int      @id @default(autoincrement())
    student    student  @relation(fields: [student_id], references: [id])
    student_id Int
    term       term     @relation(fields: [term_id], references: [id])
    term_id    Int
    created_at DateTime @default(now())
    updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
}

model validation_history {
    id         Int      @id @default(autoincrement())
    student    student  @relation(fields: [student_id], references: [id])
    student_id Int
    term       term     @relation(fields: [term_id], references: [id])
    term_id    Int
    created_at DateTime @default(now())
}
